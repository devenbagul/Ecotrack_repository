from flask import Flask, request, jsonify, render_template, redirect, url_for
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user
import mysql.connector
from werkzeug.security import generate_password_hash, check_password_hash

app = Flask(__name__, template_folder='templates', static_folder='static')
app.secret_key = 'supersecretkey'  # Needed for session management

# Initialize Flask-Login
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'  # Redirect to login if not authenticated

# Database connection
db = mysql.connector.connect(
    host="localhost",
    user="flaskuser",
    password="password123",
    database="ecotrack"
)
cursor = db.cursor()

# User class for Flask-Login
class User(UserMixin):
    def __init__(self, id, username):
        self.id = id
        self.username = username

@login_manager.user_loader
def load_user(user_id):
    cursor.execute("SELECT id, username FROM users WHERE id = %s", (user_id,))
    result = cursor.fetchone()
    if result:
        return User(result[0], result[1])
    return None

# Home Route
@app.route('/')
def home():
    return render_template('index.html')

# Signup Route
@app.route('/signup', methods=['GET', 'POST'])
def signup():
    if request.method == 'POST':
        username = request.form['username']
        password = generate_password_hash(request.form['password'])

        try:
            cursor.execute("INSERT INTO users (username, password) VALUES (%s, %s)", (username, password))
            db.commit()
            return redirect(url_for('login'))
        except mysql.connector.Error as err:
            return f"Error: {err}"
    return render_template('signup.html')

# Login Route
@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        cursor.execute("SELECT id, password FROM users WHERE username = %s", (username,))
        result = cursor.fetchone()

        if result and check_password_hash(result[1], request.form['password']):
            user = User(result[0], username)
            login_user(user)
            return redirect(url_for('dashboard'))
        return "Invalid credentials"
    return render_template('login.html')

# Dashboard Route (Requires Login)
@app.route('/dashboard')
@login_required
def dashboard():
    cursor.execute("SELECT * FROM emissions WHERE user_id = %s", (current_user.id,))
    data = cursor.fetchall()
    return render_template('dashboard.html', data=data)
# Submit Data Route (Requires Login)
@app.route('/submit', methods=['POST'])
@login_required
def submit_data():
    data = request.json
    sql = """INSERT INTO emissions (energy_usage, transportation, waste, user_id)
             VALUES (%s, %s, %s, %s)"""
    values = (data['energy_usage'], data['transportation'], data['waste'], current_user.id)
    cursor.execute(sql, values)
    db.commit()
    return jsonify({"message": "Data submitted successfully!"})

# View Data Route (Requires Login)
@app.route('/view', methods=['GET'])
@login_required
def view_data():
    cursor.execute("SELECT * FROM emissions WHERE user_id = %s", (current_user.id,))
    data = cursor.fetchall()
    result = [
        {"timestamp": row[3], "energy_usage": row[1], "transportation": row[2], "waste": row[2]}
        for row in data
    ]
    return jsonify(result)

# Logout Route
@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('login'))

@app.route('/add_details', methods=['POST'])
@login_required
def add_details():
    data = request.json
    sql = """INSERT INTO emissions (energy_usage, transportation, waste, user_id)
             VALUES (%s, %s, %s, %s)"""
    values = (data['energy_usage'], data['transportation'], data['waste'], current_user.id)

    cursor.execute(sql, values)
    db.commit()

    return jsonify({"message": "Data added successfully!"})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)

